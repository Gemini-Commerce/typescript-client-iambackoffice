/* tslint:disable */
/* eslint-disable */
/**
 * IamBackoffice Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface IambackofficeAssignRolesRequest
 */
export interface IambackofficeAssignRolesRequest {
    /**
     * 
     * @type {string}
     * @memberof IambackofficeAssignRolesRequest
     */
    'loginId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IambackofficeAssignRolesRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof IambackofficeAssignRolesRequest
     */
    'roleCodes'?: Array<string>;
}
/**
 * 
 * @export
 * @interface IambackofficeAssignRolesResponse
 */
export interface IambackofficeAssignRolesResponse {
    /**
     * 
     * @type {Array<string>}
     * @memberof IambackofficeAssignRolesResponse
     */
    'roleCodes'?: Array<string>;
}
/**
 * 
 * @export
 * @interface IambackofficeAuthenticatorConfiguration
 */
export interface IambackofficeAuthenticatorConfiguration {
    /**
     * 
     * @type {string}
     * @memberof IambackofficeAuthenticatorConfiguration
     */
    'algorithm'?: string;
    /**
     * 
     * @type {number}
     * @memberof IambackofficeAuthenticatorConfiguration
     */
    'codeLength'?: number;
    /**
     * 
     * @type {number}
     * @memberof IambackofficeAuthenticatorConfiguration
     */
    'timeStep'?: number;
}
/**
 * 
 * @export
 * @interface IambackofficeCreateGroupRequest
 */
export interface IambackofficeCreateGroupRequest {
    /**
     * 
     * @type {string}
     * @memberof IambackofficeCreateGroupRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IambackofficeCreateGroupRequest
     */
    'name'?: string;
    /**
     * 
     * @type {IambackofficeGroupType}
     * @memberof IambackofficeCreateGroupRequest
     */
    'type'?: IambackofficeGroupType;
}


/**
 * 
 * @export
 * @interface IambackofficeCreateGroupResponse
 */
export interface IambackofficeCreateGroupResponse {
    /**
     * 
     * @type {string}
     * @memberof IambackofficeCreateGroupResponse
     */
    'groupId'?: string;
}
/**
 * 
 * @export
 * @interface IambackofficeDevice
 */
export interface IambackofficeDevice {
    /**
     * 
     * @type {string}
     * @memberof IambackofficeDevice
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof IambackofficeDevice
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof IambackofficeDevice
     */
    'deviceType'?: string;
}
/**
 * 
 * @export
 * @interface IambackofficeDisableUserMfaRequest
 */
export interface IambackofficeDisableUserMfaRequest {
    /**
     * 
     * @type {string}
     * @memberof IambackofficeDisableUserMfaRequest
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IambackofficeDisableUserMfaRequest
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof IambackofficeDisableUserMfaRequest
     */
    'methodId'?: string;
}
/**
 * 
 * @export
 * @interface IambackofficeEnableUserMfaRequest
 */
export interface IambackofficeEnableUserMfaRequest {
    /**
     * 
     * @type {string}
     * @memberof IambackofficeEnableUserMfaRequest
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IambackofficeEnableUserMfaRequest
     */
    'secret'?: string;
    /**
     * 
     * @type {string}
     * @memberof IambackofficeEnableUserMfaRequest
     */
    'code'?: string;
}
/**
 * 
 * @export
 * @interface IambackofficeGenerateSecretForQRResponse
 */
export interface IambackofficeGenerateSecretForQRResponse {
    /**
     * 
     * @type {string}
     * @memberof IambackofficeGenerateSecretForQRResponse
     */
    'secret'?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const IambackofficeGroupType = {
    Unknown: 'GROUP_TYPE_UNKNOWN',
    Agent: 'GROUP_TYPE_AGENT'
} as const;

export type IambackofficeGroupType = typeof IambackofficeGroupType[keyof typeof IambackofficeGroupType];


/**
 * 
 * @export
 * @interface IambackofficeLoginMfaRequest
 */
export interface IambackofficeLoginMfaRequest {
    /**
     * 
     * @type {string}
     * @memberof IambackofficeLoginMfaRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IambackofficeLoginMfaRequest
     */
    'code'?: string;
    /**
     * 
     * @type {string}
     * @memberof IambackofficeLoginMfaRequest
     */
    'twoFactorId'?: string;
}
/**
 * 
 * @export
 * @interface IambackofficeLoginRequest
 */
export interface IambackofficeLoginRequest {
    /**
     * 
     * @type {string}
     * @memberof IambackofficeLoginRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IambackofficeLoginRequest
     */
    'ipAddress'?: string;
    /**
     * 
     * @type {string}
     * @memberof IambackofficeLoginRequest
     */
    'loginId'?: string;
    /**
     * 
     * @type {IambackofficeMetaData}
     * @memberof IambackofficeLoginRequest
     */
    'metaData'?: IambackofficeMetaData;
    /**
     * 
     * @type {boolean}
     * @memberof IambackofficeLoginRequest
     */
    'noTokens'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IambackofficeLoginRequest
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof IambackofficeLoginRequest
     */
    'twoFactorTrustId'?: string;
}
/**
 * 
 * @export
 * @interface IambackofficeLoginResponse
 */
export interface IambackofficeLoginResponse {
    /**
     * 
     * @type {ProtobufAny}
     * @memberof IambackofficeLoginResponse
     */
    'tokens'?: ProtobufAny;
    /**
     * 
     * @type {IambackofficeUser}
     * @memberof IambackofficeLoginResponse
     */
    'user'?: IambackofficeUser;
    /**
     * 
     * @type {Array<IambackofficeTwoFactorMethod>}
     * @memberof IambackofficeLoginResponse
     */
    'methods'?: Array<IambackofficeTwoFactorMethod>;
    /**
     * 
     * @type {string}
     * @memberof IambackofficeLoginResponse
     */
    'twoFactorId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IambackofficeLoginResponse
     */
    'tenantId'?: string;
}
/**
 * 
 * @export
 * @interface IambackofficeLogoutRequest
 */
export interface IambackofficeLogoutRequest {
    /**
     * 
     * @type {boolean}
     * @memberof IambackofficeLogoutRequest
     */
    'global'?: boolean;
    /**
     * 
     * @type {ProtobufAny}
     * @memberof IambackofficeLogoutRequest
     */
    'tokens'?: ProtobufAny;
}
/**
 * 
 * @export
 * @interface IambackofficeLogoutResponse
 */
export interface IambackofficeLogoutResponse {
    /**
     * 
     * @type {boolean}
     * @memberof IambackofficeLogoutResponse
     */
    'success'?: boolean;
}
/**
 * 
 * @export
 * @interface IambackofficeMetaData
 */
export interface IambackofficeMetaData {
    /**
     * 
     * @type {IambackofficeDevice}
     * @memberof IambackofficeMetaData
     */
    'device'?: IambackofficeDevice;
}
/**
 * 
 * @export
 * @interface IambackofficeRegisterAgentRequest
 */
export interface IambackofficeRegisterAgentRequest {
    /**
     * 
     * @type {string}
     * @memberof IambackofficeRegisterAgentRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IambackofficeRegisterAgentRequest
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof IambackofficeRegisterAgentRequest
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof IambackofficeRegisterAgentRequest
     */
    'agentGrn'?: string;
}
/**
 * 
 * @export
 * @interface IambackofficeRegistrationRequest
 */
export interface IambackofficeRegistrationRequest {
    /**
     * 
     * @type {IambackofficeUserRegistration}
     * @memberof IambackofficeRegistrationRequest
     */
    'registration'?: IambackofficeUserRegistration;
    /**
     * 
     * @type {boolean}
     * @memberof IambackofficeRegistrationRequest
     */
    'sendSetPasswordEmail'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof IambackofficeRegistrationRequest
     */
    'skipRegistrationVerification'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof IambackofficeRegistrationRequest
     */
    'skipVerification'?: boolean;
    /**
     * 
     * @type {IambackofficeUser}
     * @memberof IambackofficeRegistrationRequest
     */
    'user'?: IambackofficeUser;
}
/**
 * 
 * @export
 * @interface IambackofficeRegistrationResponse
 */
export interface IambackofficeRegistrationResponse {
    /**
     * 
     * @type {ProtobufAny}
     * @memberof IambackofficeRegistrationResponse
     */
    'tokens'?: ProtobufAny;
    /**
     * 
     * @type {IambackofficeUserRegistration}
     * @memberof IambackofficeRegistrationResponse
     */
    'registration'?: IambackofficeUserRegistration;
    /**
     * 
     * @type {IambackofficeUser}
     * @memberof IambackofficeRegistrationResponse
     */
    'user'?: IambackofficeUser;
}
/**
 * 
 * @export
 * @interface IambackofficeTwoFactorMethod
 */
export interface IambackofficeTwoFactorMethod {
    /**
     * 
     * @type {IambackofficeAuthenticatorConfiguration}
     * @memberof IambackofficeTwoFactorMethod
     */
    'authenticator'?: IambackofficeAuthenticatorConfiguration;
    /**
     * 
     * @type {string}
     * @memberof IambackofficeTwoFactorMethod
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof IambackofficeTwoFactorMethod
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof IambackofficeTwoFactorMethod
     */
    'method'?: string;
    /**
     * 
     * @type {string}
     * @memberof IambackofficeTwoFactorMethod
     */
    'mobilePhone'?: string;
    /**
     * 
     * @type {string}
     * @memberof IambackofficeTwoFactorMethod
     */
    'secret'?: string;
}
/**
 * 
 * @export
 * @interface IambackofficeUnassignRolesRequest
 */
export interface IambackofficeUnassignRolesRequest {
    /**
     * 
     * @type {string}
     * @memberof IambackofficeUnassignRolesRequest
     */
    'loginId'?: string;
    /**
     * 
     * @type {string}
     * @memberof IambackofficeUnassignRolesRequest
     */
    'tenantId'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof IambackofficeUnassignRolesRequest
     */
    'roleCodes'?: Array<string>;
}
/**
 * 
 * @export
 * @interface IambackofficeUnassignRolesResponse
 */
export interface IambackofficeUnassignRolesResponse {
    /**
     * 
     * @type {Array<string>}
     * @memberof IambackofficeUnassignRolesResponse
     */
    'roleCodes'?: Array<string>;
}
/**
 * 
 * @export
 * @interface IambackofficeUser
 */
export interface IambackofficeUser {
    /**
     * 
     * @type {boolean}
     * @memberof IambackofficeUser
     */
    'active'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IambackofficeUser
     */
    'birthDate'?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof IambackofficeUser
     */
    'data'?: { [key: string]: string; };
    /**
     * 
     * @type {string}
     * @memberof IambackofficeUser
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof IambackofficeUser
     */
    'firstName'?: string;
    /**
     * 
     * @type {string}
     * @memberof IambackofficeUser
     */
    'fullName'?: string;
    /**
     * 
     * @type {string}
     * @memberof IambackofficeUser
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof IambackofficeUser
     */
    'imageUrl'?: string;
    /**
     * 
     * @type {string}
     * @memberof IambackofficeUser
     */
    'insertInstant'?: string;
    /**
     * 
     * @type {string}
     * @memberof IambackofficeUser
     */
    'lastLoginInstant'?: string;
    /**
     * 
     * @type {string}
     * @memberof IambackofficeUser
     */
    'lastName'?: string;
    /**
     * 
     * @type {string}
     * @memberof IambackofficeUser
     */
    'lastUpdateInstant'?: string;
    /**
     * 
     * @type {string}
     * @memberof IambackofficeUser
     */
    'middleName'?: string;
    /**
     * 
     * @type {string}
     * @memberof IambackofficeUser
     */
    'mobilePhone'?: string;
    /**
     * 
     * @type {string}
     * @memberof IambackofficeUser
     */
    'password'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IambackofficeUser
     */
    'passwordChangeRequired'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof IambackofficeUser
     */
    'passwordLastUpdateInstant'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof IambackofficeUser
     */
    'preferredLanguages'?: Array<string>;
    /**
     * 
     * @type {Array<IambackofficeUserRegistration>}
     * @memberof IambackofficeUser
     */
    'registrations'?: Array<IambackofficeUserRegistration>;
    /**
     * 
     * @type {string}
     * @memberof IambackofficeUser
     */
    'timezone'?: string;
    /**
     * 
     * @type {IambackofficeUserTwoFactorConfiguration}
     * @memberof IambackofficeUser
     */
    'twoFactor'?: IambackofficeUserTwoFactorConfiguration;
    /**
     * 
     * @type {string}
     * @memberof IambackofficeUser
     */
    'username'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof IambackofficeUser
     */
    'verified'?: boolean;
}
/**
 * 
 * @export
 * @interface IambackofficeUserMfaResponse
 */
export interface IambackofficeUserMfaResponse {
    /**
     * 
     * @type {boolean}
     * @memberof IambackofficeUserMfaResponse
     */
    'success'?: boolean;
}
/**
 * 
 * @export
 * @interface IambackofficeUserRegistration
 */
export interface IambackofficeUserRegistration {
    /**
     * 
     * @type {string}
     * @memberof IambackofficeUserRegistration
     */
    'tenantId'?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof IambackofficeUserRegistration
     */
    'data'?: { [key: string]: string; };
    /**
     * 
     * @type {Array<string>}
     * @memberof IambackofficeUserRegistration
     */
    'preferredLanguages'?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof IambackofficeUserRegistration
     */
    'roles'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof IambackofficeUserRegistration
     */
    'timezone'?: string;
}
/**
 * 
 * @export
 * @interface IambackofficeUserTwoFactorConfiguration
 */
export interface IambackofficeUserTwoFactorConfiguration {
    /**
     * 
     * @type {Array<IambackofficeTwoFactorMethod>}
     * @memberof IambackofficeUserTwoFactorConfiguration
     */
    'methods'?: Array<IambackofficeTwoFactorMethod>;
    /**
     * 
     * @type {Array<string>}
     * @memberof IambackofficeUserTwoFactorConfiguration
     */
    'recoveryCodes'?: Array<string>;
}
/**
 * `Any` contains an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message.  Protobuf library provides support to pack/unpack Any values in the form of utility functions or additional generated methods of the Any type.  Example 1: Pack and unpack a message in C++.      Foo foo = ...;     Any any;     any.PackFrom(foo);     ...     if (any.UnpackTo(&foo)) {       ...     }  Example 2: Pack and unpack a message in Java.      Foo foo = ...;     Any any = Any.pack(foo);     ...     if (any.is(Foo.class)) {       foo = any.unpack(Foo.class);     }  Example 3: Pack and unpack a message in Python.      foo = Foo(...)     any = Any()     any.Pack(foo)     ...     if any.Is(Foo.DESCRIPTOR):       any.Unpack(foo)       ...  Example 4: Pack and unpack a message in Go       foo := &pb.Foo{...}      any, err := anypb.New(foo)      if err != nil {        ...      }      ...      foo := &pb.Foo{}      if err := any.UnmarshalTo(foo); err != nil {        ...      }  The pack methods provided by protobuf library will by default use \'type.googleapis.com/full.type.name\' as the type URL and the unpack methods only use the fully qualified type name after the last \'/\' in the type URL, for example \"foo.bar.com/x/y.z\" will yield type name \"y.z\".   JSON  The JSON representation of an `Any` value uses the regular representation of the deserialized, embedded message, with an additional field `@type` which contains the type URL. Example:      package google.profile;     message Person {       string first_name = 1;       string last_name = 2;     }      {       \"@type\": \"type.googleapis.com/google.profile.Person\",       \"firstName\": <string>,       \"lastName\": <string>     }  If the embedded message type is well-known and has a custom JSON representation, that representation will be embedded adding a field `value` which holds the custom JSON in addition to the `@type` field. Example (for message [google.protobuf.Duration][]):      {       \"@type\": \"type.googleapis.com/google.protobuf.Duration\",       \"value\": \"1.212s\"     }
 * @export
 * @interface ProtobufAny
 */
export interface ProtobufAny {
    [key: string]: object;

    /**
     * A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL\'s path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted).  In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows:  * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.)  Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com.  Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics.
     * @type {string}
     * @memberof ProtobufAny
     */
    '@type'?: string;
}
/**
 * 
 * @export
 * @interface RpcStatus
 */
export interface RpcStatus {
    /**
     * 
     * @type {number}
     * @memberof RpcStatus
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof RpcStatus
     */
    'message'?: string;
    /**
     * 
     * @type {Array<ProtobufAny>}
     * @memberof RpcStatus
     */
    'details'?: Array<ProtobufAny>;
}

/**
 * IamBackofficeApi - axios parameter creator
 * @export
 */
export const IamBackofficeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary AUTHZ
         * @param {IambackofficeAssignRolesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iamBackofficeAssignRoles: async (body: IambackofficeAssignRolesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('iamBackofficeAssignRoles', 'body', body)
            const localVarPath = `/iambackoffice.IamBackoffice/AssignRoles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GROUPS
         * @param {IambackofficeCreateGroupRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iamBackofficeCreateGroup: async (body: IambackofficeCreateGroupRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('iamBackofficeCreateGroup', 'body', body)
            const localVarPath = `/iambackoffice.IamBackoffice/CreateGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IambackofficeDisableUserMfaRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iamBackofficeDisableUserMfa: async (body: IambackofficeDisableUserMfaRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('iamBackofficeDisableUserMfa', 'body', body)
            const localVarPath = `/iambackoffice.IamBackoffice/DisableUserMfa`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IambackofficeEnableUserMfaRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iamBackofficeEnableUserMfa: async (body: IambackofficeEnableUserMfaRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('iamBackofficeEnableUserMfa', 'body', body)
            const localVarPath = `/iambackoffice.IamBackoffice/EnableUserMfa`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary MFA
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iamBackofficeGenerateSecretForQR: async (body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('iamBackofficeGenerateSecretForQR', 'body', body)
            const localVarPath = `/iambackoffice.IamBackoffice/GenerateSecretForQR`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary LOGIN
         * @param {IambackofficeLoginRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iamBackofficeLogin: async (body: IambackofficeLoginRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('iamBackofficeLogin', 'body', body)
            const localVarPath = `/iambackoffice.IamBackoffice/Login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary LOGIN MFA
         * @param {IambackofficeLoginMfaRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iamBackofficeLoginMfa: async (body: IambackofficeLoginMfaRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('iamBackofficeLoginMfa', 'body', body)
            const localVarPath = `/iambackoffice.IamBackoffice/LoginMfa`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IambackofficeLogoutRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iamBackofficeLogout: async (body: IambackofficeLogoutRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('iamBackofficeLogout', 'body', body)
            const localVarPath = `/iambackoffice.IamBackoffice/Logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary REGISTRATION
         * @param {IambackofficeRegistrationRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iamBackofficeRegister: async (body: IambackofficeRegistrationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('iamBackofficeRegister', 'body', body)
            const localVarPath = `/iambackoffice.IamBackoffice/Register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary AGENTS
         * @param {IambackofficeRegisterAgentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iamBackofficeRegisterAgent: async (body: IambackofficeRegisterAgentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('iamBackofficeRegisterAgent', 'body', body)
            const localVarPath = `/iambackoffice.IamBackoffice/RegisterAgent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IambackofficeUnassignRolesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iamBackofficeUnassignRoles: async (body: IambackofficeUnassignRolesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('iamBackofficeUnassignRoles', 'body', body)
            const localVarPath = `/iambackoffice.IamBackoffice/UnassignRoles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IamBackofficeApi - functional programming interface
 * @export
 */
export const IamBackofficeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IamBackofficeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary AUTHZ
         * @param {IambackofficeAssignRolesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iamBackofficeAssignRoles(body: IambackofficeAssignRolesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IambackofficeAssignRolesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iamBackofficeAssignRoles(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GROUPS
         * @param {IambackofficeCreateGroupRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iamBackofficeCreateGroup(body: IambackofficeCreateGroupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IambackofficeCreateGroupResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iamBackofficeCreateGroup(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {IambackofficeDisableUserMfaRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iamBackofficeDisableUserMfa(body: IambackofficeDisableUserMfaRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IambackofficeUserMfaResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iamBackofficeDisableUserMfa(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {IambackofficeEnableUserMfaRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iamBackofficeEnableUserMfa(body: IambackofficeEnableUserMfaRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IambackofficeUserMfaResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iamBackofficeEnableUserMfa(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary MFA
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iamBackofficeGenerateSecretForQR(body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IambackofficeGenerateSecretForQRResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iamBackofficeGenerateSecretForQR(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary LOGIN
         * @param {IambackofficeLoginRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iamBackofficeLogin(body: IambackofficeLoginRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IambackofficeLoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iamBackofficeLogin(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary LOGIN MFA
         * @param {IambackofficeLoginMfaRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iamBackofficeLoginMfa(body: IambackofficeLoginMfaRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IambackofficeLoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iamBackofficeLoginMfa(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {IambackofficeLogoutRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iamBackofficeLogout(body: IambackofficeLogoutRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IambackofficeLogoutResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iamBackofficeLogout(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary REGISTRATION
         * @param {IambackofficeRegistrationRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iamBackofficeRegister(body: IambackofficeRegistrationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IambackofficeRegistrationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iamBackofficeRegister(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary AGENTS
         * @param {IambackofficeRegisterAgentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iamBackofficeRegisterAgent(body: IambackofficeRegisterAgentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IambackofficeRegistrationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iamBackofficeRegisterAgent(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {IambackofficeUnassignRolesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async iamBackofficeUnassignRoles(body: IambackofficeUnassignRolesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IambackofficeUnassignRolesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.iamBackofficeUnassignRoles(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IamBackofficeApi - factory interface
 * @export
 */
export const IamBackofficeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IamBackofficeApiFp(configuration)
    return {
        /**
         * 
         * @summary AUTHZ
         * @param {IambackofficeAssignRolesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iamBackofficeAssignRoles(body: IambackofficeAssignRolesRequest, options?: any): AxiosPromise<IambackofficeAssignRolesResponse> {
            return localVarFp.iamBackofficeAssignRoles(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GROUPS
         * @param {IambackofficeCreateGroupRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iamBackofficeCreateGroup(body: IambackofficeCreateGroupRequest, options?: any): AxiosPromise<IambackofficeCreateGroupResponse> {
            return localVarFp.iamBackofficeCreateGroup(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IambackofficeDisableUserMfaRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iamBackofficeDisableUserMfa(body: IambackofficeDisableUserMfaRequest, options?: any): AxiosPromise<IambackofficeUserMfaResponse> {
            return localVarFp.iamBackofficeDisableUserMfa(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IambackofficeEnableUserMfaRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iamBackofficeEnableUserMfa(body: IambackofficeEnableUserMfaRequest, options?: any): AxiosPromise<IambackofficeUserMfaResponse> {
            return localVarFp.iamBackofficeEnableUserMfa(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary MFA
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iamBackofficeGenerateSecretForQR(body: object, options?: any): AxiosPromise<IambackofficeGenerateSecretForQRResponse> {
            return localVarFp.iamBackofficeGenerateSecretForQR(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary LOGIN
         * @param {IambackofficeLoginRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iamBackofficeLogin(body: IambackofficeLoginRequest, options?: any): AxiosPromise<IambackofficeLoginResponse> {
            return localVarFp.iamBackofficeLogin(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary LOGIN MFA
         * @param {IambackofficeLoginMfaRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iamBackofficeLoginMfa(body: IambackofficeLoginMfaRequest, options?: any): AxiosPromise<IambackofficeLoginResponse> {
            return localVarFp.iamBackofficeLoginMfa(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IambackofficeLogoutRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iamBackofficeLogout(body: IambackofficeLogoutRequest, options?: any): AxiosPromise<IambackofficeLogoutResponse> {
            return localVarFp.iamBackofficeLogout(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary REGISTRATION
         * @param {IambackofficeRegistrationRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iamBackofficeRegister(body: IambackofficeRegistrationRequest, options?: any): AxiosPromise<IambackofficeRegistrationResponse> {
            return localVarFp.iamBackofficeRegister(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary AGENTS
         * @param {IambackofficeRegisterAgentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iamBackofficeRegisterAgent(body: IambackofficeRegisterAgentRequest, options?: any): AxiosPromise<IambackofficeRegistrationResponse> {
            return localVarFp.iamBackofficeRegisterAgent(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IambackofficeUnassignRolesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        iamBackofficeUnassignRoles(body: IambackofficeUnassignRolesRequest, options?: any): AxiosPromise<IambackofficeUnassignRolesResponse> {
            return localVarFp.iamBackofficeUnassignRoles(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IamBackofficeApi - object-oriented interface
 * @export
 * @class IamBackofficeApi
 * @extends {BaseAPI}
 */
export class IamBackofficeApi extends BaseAPI {
    /**
     * 
     * @summary AUTHZ
     * @param {IambackofficeAssignRolesRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IamBackofficeApi
     */
    public iamBackofficeAssignRoles(body: IambackofficeAssignRolesRequest, options?: AxiosRequestConfig) {
        return IamBackofficeApiFp(this.configuration).iamBackofficeAssignRoles(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GROUPS
     * @param {IambackofficeCreateGroupRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IamBackofficeApi
     */
    public iamBackofficeCreateGroup(body: IambackofficeCreateGroupRequest, options?: AxiosRequestConfig) {
        return IamBackofficeApiFp(this.configuration).iamBackofficeCreateGroup(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {IambackofficeDisableUserMfaRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IamBackofficeApi
     */
    public iamBackofficeDisableUserMfa(body: IambackofficeDisableUserMfaRequest, options?: AxiosRequestConfig) {
        return IamBackofficeApiFp(this.configuration).iamBackofficeDisableUserMfa(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {IambackofficeEnableUserMfaRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IamBackofficeApi
     */
    public iamBackofficeEnableUserMfa(body: IambackofficeEnableUserMfaRequest, options?: AxiosRequestConfig) {
        return IamBackofficeApiFp(this.configuration).iamBackofficeEnableUserMfa(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary MFA
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IamBackofficeApi
     */
    public iamBackofficeGenerateSecretForQR(body: object, options?: AxiosRequestConfig) {
        return IamBackofficeApiFp(this.configuration).iamBackofficeGenerateSecretForQR(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary LOGIN
     * @param {IambackofficeLoginRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IamBackofficeApi
     */
    public iamBackofficeLogin(body: IambackofficeLoginRequest, options?: AxiosRequestConfig) {
        return IamBackofficeApiFp(this.configuration).iamBackofficeLogin(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary LOGIN MFA
     * @param {IambackofficeLoginMfaRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IamBackofficeApi
     */
    public iamBackofficeLoginMfa(body: IambackofficeLoginMfaRequest, options?: AxiosRequestConfig) {
        return IamBackofficeApiFp(this.configuration).iamBackofficeLoginMfa(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {IambackofficeLogoutRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IamBackofficeApi
     */
    public iamBackofficeLogout(body: IambackofficeLogoutRequest, options?: AxiosRequestConfig) {
        return IamBackofficeApiFp(this.configuration).iamBackofficeLogout(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary REGISTRATION
     * @param {IambackofficeRegistrationRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IamBackofficeApi
     */
    public iamBackofficeRegister(body: IambackofficeRegistrationRequest, options?: AxiosRequestConfig) {
        return IamBackofficeApiFp(this.configuration).iamBackofficeRegister(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary AGENTS
     * @param {IambackofficeRegisterAgentRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IamBackofficeApi
     */
    public iamBackofficeRegisterAgent(body: IambackofficeRegisterAgentRequest, options?: AxiosRequestConfig) {
        return IamBackofficeApiFp(this.configuration).iamBackofficeRegisterAgent(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {IambackofficeUnassignRolesRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IamBackofficeApi
     */
    public iamBackofficeUnassignRoles(body: IambackofficeUnassignRolesRequest, options?: AxiosRequestConfig) {
        return IamBackofficeApiFp(this.configuration).iamBackofficeUnassignRoles(body, options).then((request) => request(this.axios, this.basePath));
    }
}



