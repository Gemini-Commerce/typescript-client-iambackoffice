/* tslint:disable */
/* eslint-disable */
/**
 * IamBackoffice Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  IambackofficeAssignRolesRequest,
  IambackofficeAssignRolesResponse,
  IambackofficeAssignUserToGroupRequest,
  IambackofficeCreateGroupRequest,
  IambackofficeCreateGroupResponse,
  IambackofficeDisableUserMfaRequest,
  IambackofficeEnableUserMfaRequest,
  IambackofficeGenerateSecretForQRResponse,
  IambackofficeGetUserRequest,
  IambackofficeGetUserResponse,
  IambackofficeLoginMfaRequest,
  IambackofficeLoginRequest,
  IambackofficeLoginResponse,
  IambackofficeLogoutRequest,
  IambackofficeLogoutResponse,
  IambackofficeRegistrationRequest,
  IambackofficeRegistrationResponse,
  IambackofficeSearchGroupsRequest,
  IambackofficeSearchGroupsResponse,
  IambackofficeUnassignRolesRequest,
  IambackofficeUnassignRolesResponse,
  IambackofficeUserMfaResponse,
  RpcStatus,
} from '../models/index';
import {
    IambackofficeAssignRolesRequestFromJSON,
    IambackofficeAssignRolesRequestToJSON,
    IambackofficeAssignRolesResponseFromJSON,
    IambackofficeAssignRolesResponseToJSON,
    IambackofficeAssignUserToGroupRequestFromJSON,
    IambackofficeAssignUserToGroupRequestToJSON,
    IambackofficeCreateGroupRequestFromJSON,
    IambackofficeCreateGroupRequestToJSON,
    IambackofficeCreateGroupResponseFromJSON,
    IambackofficeCreateGroupResponseToJSON,
    IambackofficeDisableUserMfaRequestFromJSON,
    IambackofficeDisableUserMfaRequestToJSON,
    IambackofficeEnableUserMfaRequestFromJSON,
    IambackofficeEnableUserMfaRequestToJSON,
    IambackofficeGenerateSecretForQRResponseFromJSON,
    IambackofficeGenerateSecretForQRResponseToJSON,
    IambackofficeGetUserRequestFromJSON,
    IambackofficeGetUserRequestToJSON,
    IambackofficeGetUserResponseFromJSON,
    IambackofficeGetUserResponseToJSON,
    IambackofficeLoginMfaRequestFromJSON,
    IambackofficeLoginMfaRequestToJSON,
    IambackofficeLoginRequestFromJSON,
    IambackofficeLoginRequestToJSON,
    IambackofficeLoginResponseFromJSON,
    IambackofficeLoginResponseToJSON,
    IambackofficeLogoutRequestFromJSON,
    IambackofficeLogoutRequestToJSON,
    IambackofficeLogoutResponseFromJSON,
    IambackofficeLogoutResponseToJSON,
    IambackofficeRegistrationRequestFromJSON,
    IambackofficeRegistrationRequestToJSON,
    IambackofficeRegistrationResponseFromJSON,
    IambackofficeRegistrationResponseToJSON,
    IambackofficeSearchGroupsRequestFromJSON,
    IambackofficeSearchGroupsRequestToJSON,
    IambackofficeSearchGroupsResponseFromJSON,
    IambackofficeSearchGroupsResponseToJSON,
    IambackofficeUnassignRolesRequestFromJSON,
    IambackofficeUnassignRolesRequestToJSON,
    IambackofficeUnassignRolesResponseFromJSON,
    IambackofficeUnassignRolesResponseToJSON,
    IambackofficeUserMfaResponseFromJSON,
    IambackofficeUserMfaResponseToJSON,
    RpcStatusFromJSON,
    RpcStatusToJSON,
} from '../models/index';

export interface IamBackofficeAssignRolesRequest {
    body: IambackofficeAssignRolesRequest;
}

export interface IamBackofficeAssignUserToGroupRequest {
    body: IambackofficeAssignUserToGroupRequest;
}

export interface IamBackofficeCreateGroupRequest {
    body: IambackofficeCreateGroupRequest;
}

export interface IamBackofficeDisableUserMfaRequest {
    body: IambackofficeDisableUserMfaRequest;
}

export interface IamBackofficeEnableUserMfaRequest {
    body: IambackofficeEnableUserMfaRequest;
}

export interface IamBackofficeGenerateSecretForQRRequest {
    body: object;
}

export interface IamBackofficeGetUserRequest {
    body: IambackofficeGetUserRequest;
}

export interface IamBackofficeLoginRequest {
    body: IambackofficeLoginRequest;
}

export interface IamBackofficeLoginMfaRequest {
    body: IambackofficeLoginMfaRequest;
}

export interface IamBackofficeLogoutRequest {
    body: IambackofficeLogoutRequest;
}

export interface IamBackofficeRegisterRequest {
    body: IambackofficeRegistrationRequest;
}

export interface IamBackofficeSearchGroupsRequest {
    body: IambackofficeSearchGroupsRequest;
}

export interface IamBackofficeUnassignRolesRequest {
    body: IambackofficeUnassignRolesRequest;
}

/**
 * 
 */
export class IamBackofficeApi extends runtime.BaseAPI {

    /**
     * AUTHZ
     */
    async iamBackofficeAssignRolesRaw(requestParameters: IamBackofficeAssignRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IambackofficeAssignRolesResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling iamBackofficeAssignRoles.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/iambackoffice.IamBackoffice/AssignRoles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IambackofficeAssignRolesRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IambackofficeAssignRolesResponseFromJSON(jsonValue));
    }

    /**
     * AUTHZ
     */
    async iamBackofficeAssignRoles(requestParameters: IamBackofficeAssignRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IambackofficeAssignRolesResponse> {
        const response = await this.iamBackofficeAssignRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async iamBackofficeAssignUserToGroupRaw(requestParameters: IamBackofficeAssignUserToGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling iamBackofficeAssignUserToGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/iambackoffice.IamBackoffice/AssignUserToGroup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IambackofficeAssignUserToGroupRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async iamBackofficeAssignUserToGroup(requestParameters: IamBackofficeAssignUserToGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.iamBackofficeAssignUserToGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * GROUPS
     */
    async iamBackofficeCreateGroupRaw(requestParameters: IamBackofficeCreateGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IambackofficeCreateGroupResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling iamBackofficeCreateGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/iambackoffice.IamBackoffice/CreateGroup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IambackofficeCreateGroupRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IambackofficeCreateGroupResponseFromJSON(jsonValue));
    }

    /**
     * GROUPS
     */
    async iamBackofficeCreateGroup(requestParameters: IamBackofficeCreateGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IambackofficeCreateGroupResponse> {
        const response = await this.iamBackofficeCreateGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async iamBackofficeDisableUserMfaRaw(requestParameters: IamBackofficeDisableUserMfaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IambackofficeUserMfaResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling iamBackofficeDisableUserMfa.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/iambackoffice.IamBackoffice/DisableUserMfa`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IambackofficeDisableUserMfaRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IambackofficeUserMfaResponseFromJSON(jsonValue));
    }

    /**
     */
    async iamBackofficeDisableUserMfa(requestParameters: IamBackofficeDisableUserMfaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IambackofficeUserMfaResponse> {
        const response = await this.iamBackofficeDisableUserMfaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async iamBackofficeEnableUserMfaRaw(requestParameters: IamBackofficeEnableUserMfaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IambackofficeUserMfaResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling iamBackofficeEnableUserMfa.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/iambackoffice.IamBackoffice/EnableUserMfa`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IambackofficeEnableUserMfaRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IambackofficeUserMfaResponseFromJSON(jsonValue));
    }

    /**
     */
    async iamBackofficeEnableUserMfa(requestParameters: IamBackofficeEnableUserMfaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IambackofficeUserMfaResponse> {
        const response = await this.iamBackofficeEnableUserMfaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * MFA
     */
    async iamBackofficeGenerateSecretForQRRaw(requestParameters: IamBackofficeGenerateSecretForQRRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IambackofficeGenerateSecretForQRResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling iamBackofficeGenerateSecretForQR.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/iambackoffice.IamBackoffice/GenerateSecretForQR`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IambackofficeGenerateSecretForQRResponseFromJSON(jsonValue));
    }

    /**
     * MFA
     */
    async iamBackofficeGenerateSecretForQR(requestParameters: IamBackofficeGenerateSecretForQRRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IambackofficeGenerateSecretForQRResponse> {
        const response = await this.iamBackofficeGenerateSecretForQRRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * USER
     */
    async iamBackofficeGetUserRaw(requestParameters: IamBackofficeGetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IambackofficeGetUserResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling iamBackofficeGetUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/iambackoffice.IamBackoffice/GetUser`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IambackofficeGetUserRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IambackofficeGetUserResponseFromJSON(jsonValue));
    }

    /**
     * USER
     */
    async iamBackofficeGetUser(requestParameters: IamBackofficeGetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IambackofficeGetUserResponse> {
        const response = await this.iamBackofficeGetUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * LOGIN
     */
    async iamBackofficeLoginRaw(requestParameters: IamBackofficeLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IambackofficeLoginResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling iamBackofficeLogin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/iambackoffice.IamBackoffice/Login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IambackofficeLoginRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IambackofficeLoginResponseFromJSON(jsonValue));
    }

    /**
     * LOGIN
     */
    async iamBackofficeLogin(requestParameters: IamBackofficeLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IambackofficeLoginResponse> {
        const response = await this.iamBackofficeLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * LOGIN MFA
     */
    async iamBackofficeLoginMfaRaw(requestParameters: IamBackofficeLoginMfaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IambackofficeLoginResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling iamBackofficeLoginMfa.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/iambackoffice.IamBackoffice/LoginMfa`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IambackofficeLoginMfaRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IambackofficeLoginResponseFromJSON(jsonValue));
    }

    /**
     * LOGIN MFA
     */
    async iamBackofficeLoginMfa(requestParameters: IamBackofficeLoginMfaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IambackofficeLoginResponse> {
        const response = await this.iamBackofficeLoginMfaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async iamBackofficeLogoutRaw(requestParameters: IamBackofficeLogoutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IambackofficeLogoutResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling iamBackofficeLogout.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/iambackoffice.IamBackoffice/Logout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IambackofficeLogoutRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IambackofficeLogoutResponseFromJSON(jsonValue));
    }

    /**
     */
    async iamBackofficeLogout(requestParameters: IamBackofficeLogoutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IambackofficeLogoutResponse> {
        const response = await this.iamBackofficeLogoutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * REGISTRATION
     */
    async iamBackofficeRegisterRaw(requestParameters: IamBackofficeRegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IambackofficeRegistrationResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling iamBackofficeRegister.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/iambackoffice.IamBackoffice/Register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IambackofficeRegistrationRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IambackofficeRegistrationResponseFromJSON(jsonValue));
    }

    /**
     * REGISTRATION
     */
    async iamBackofficeRegister(requestParameters: IamBackofficeRegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IambackofficeRegistrationResponse> {
        const response = await this.iamBackofficeRegisterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async iamBackofficeSearchGroupsRaw(requestParameters: IamBackofficeSearchGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IambackofficeSearchGroupsResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling iamBackofficeSearchGroups.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/iambackoffice.IamBackoffice/SearchGroups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IambackofficeSearchGroupsRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IambackofficeSearchGroupsResponseFromJSON(jsonValue));
    }

    /**
     */
    async iamBackofficeSearchGroups(requestParameters: IamBackofficeSearchGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IambackofficeSearchGroupsResponse> {
        const response = await this.iamBackofficeSearchGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async iamBackofficeUnassignRolesRaw(requestParameters: IamBackofficeUnassignRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IambackofficeUnassignRolesResponse>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling iamBackofficeUnassignRoles.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/iambackoffice.IamBackoffice/UnassignRoles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IambackofficeUnassignRolesRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IambackofficeUnassignRolesResponseFromJSON(jsonValue));
    }

    /**
     */
    async iamBackofficeUnassignRoles(requestParameters: IamBackofficeUnassignRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IambackofficeUnassignRolesResponse> {
        const response = await this.iamBackofficeUnassignRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
